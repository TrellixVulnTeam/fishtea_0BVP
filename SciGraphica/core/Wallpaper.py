#!/usr/bin/python# -*- coding: UTF-8 -*-import osimport pandas as pdimport numpy as npimport osfrom core.Store import Storeimport core.configdef getWallpaper(id):    return id in core.config.Gla_bizhi_account###数据类class Wallpaper(Store):    def __init__(self,file):        Store.__init__(self,files=file)    def get_wallpaper_data(self):        temp = self.read_semdata()        data = temp.loc[temp['推广账户'].apply(getWallpaper)]        col = ['渠道','日期','推广计划','展示次数','点击次数','总费用','实际消费']        wallpaperdata = pd.DataFrame(data,columns=col)        wallpaperdata['渠道'] = wallpaperdata['渠道'].astype('int64')        ##处理由于多帐户投放引起的BUG        duplicate_row = wallpaperdata.duplicated(subset=['渠道','日期','推广计划'],keep=False)        duplicate_data = wallpaperdata.loc[duplicate_row,:]        duplicate_data_sum = duplicate_data.groupby(by=['日期', '渠道','推广计划']).agg({'展示次数':sum,'点击次数':sum,'总费用':sum,'实际消费':sum}).reset_index(drop=True)        duplicate_data_one = duplicate_data.drop_duplicates(subset=['日期','渠道','推广计划'], keep="first").reset_index(drop=True)        duplicate_data_one['展示次数'] = duplicate_data_sum['展示次数']        duplicate_data_one['点击次数'] = duplicate_data_sum['点击次数']        duplicate_data_one['总费用'] = duplicate_data_sum['总费用']        duplicate_data_one['实际消费'] = duplicate_data_sum['实际消费']        ###取出未重复数据的行        no_duplicate_row = wallpaperdata.drop_duplicates(subset=['日期', '渠道','推广计划'], keep=False)        ####合并后取得最终数据        request = pd.concat([no_duplicate_row, duplicate_data_one])        return request    def wallpaper_chanel_tool(self,wallpaperdata,inter='baidu'):        print("生成百度数据....")        if inter == 'baidu':            temp = wallpaperdata.loc[(wallpaperdata['渠道'] == 1001) | (wallpaperdata['渠道'] == 1004)]        elif inter == 'sogou':            temp = wallpaperdata.loc[(wallpaperdata['渠道'] == 1002)]        else:            temp = wallpaperdata.loc[(wallpaperdata['渠道'] == 1003)]        temp.index = pd.to_datetime(temp.index, format="%Y-%m-%d")        res = pd.pivot_table(temp, index=['日期'], values=["实际消耗", "安装成功", "会员支付人数", "会员支付金额", "鱼干支付人数", "鱼干支付金额"],aggfunc=[np.sum])        res = res.fillna(0)        res.columns = ['_'.join("%s" % i for i in col) for col in res.columns.values]        res.columns = ["会员支付人数", '会员支付金额', '安装成功', '实际消耗', '鱼干支付人数', '鱼干支付金额']        res['安装成本'] = res['实际消耗'] / res['安装成功']        res['收入'] = res['会员支付金额'] + res['鱼干支付金额']        res['ROI'] = (res['收入'] - res['实际消耗']) / res['实际消耗']        res['会员客单'] = res['会员支付金额'] / res['会员支付人数']        res['鱼干客单'] = res['鱼干支付金额'] / res['鱼干支付人数']        res['会员转化率'] = res['会员支付人数'] / res['安装成功']        res['鱼干转化率'] = res['鱼干支付人数'] / res['安装成功']        columns = ['实际消耗', '安装成功', '安装成本', '收入', 'ROI', "会员支付人数", "会员支付金额", "会员客单", "会员转化率", "鱼干支付人数", "鱼干支付金额", "鱼干客单",                   "鱼干转化率", ]        baidudata = pd.DataFrame(res, columns=columns)        baidudata = baidudata.round(            {'实际消耗': 2, '安装成本': 2, 'ROI': 2, '会员转化率': 2, '会员转化率': 4, '鱼干客单': 2, '鱼干转化率': 4, '会员客单': 2})        baidudata.fillna(0, inplace=True)        return baidudata    def wallpaper_admin_data(self):        wallpaperdata =  self.get_wallpaper_data()        baidu_data = self.wallpaper_chanel_tool(wallpaperdata,inter='baidu')        sogou_data = self.wallpaper_chanel_tool(wallpaperdata, inter='sogou')        s360_data = self.wallpaper_chanel_tool(wallpaperdata, inter='360')        print(baidu_data)